From 468fca9361770ff0bdcfdab6a1e2c226fec8481c Mon Sep 17 00:00:00 2001
From: Stephan Linz <linz@li-pro.net>
Date: Sun, 6 Nov 2011 00:34:33 +0100
Subject: [Xilinx] gdb: fix endian issues in prologue analysis

Also fix other hooks used in software single step (if ever used).

Recreate from http://git.xilinx.com/?p=mb_gnu.git;a=history;f=src/gdb
  - f94a81b75709c74227d057b5adf70ae922bf9cd5

Signed-off-by: Stephan Linz <linz@li-pro.net>

diff --git a/gdb/config/microblaze/tm-microblaze.h b/gdb/config/microblaze/tm-microblaze.h
index b4d6077..0c3d38b 100644
--- a/gdb/config/microblaze/tm-microblaze.h
+++ b/gdb/config/microblaze/tm-microblaze.h
@@ -121,7 +121,7 @@ extern void microblaze_target_write_fp(CORE_ADDR val);
 #define LITTLE_BREAKPOINT {0x60, 0x00, 0xcc, 0xb9}
 #else
 #define BIG_BREAKPOINT {0x98, 0x0c, 0x00, 0x00}
-#define LITTLE_BREAKPOINT {0x00, 0x00, 0xc0, 0x89}
+#define LITTLE_BREAKPOINT {0x00, 0x00, 0x0c, 0x98}
 #endif
 
 
diff --git a/gdb/microblaze-tdep.c b/gdb/microblaze-tdep.c
index 7957c44..d308b4a 100644
--- a/gdb/microblaze-tdep.c
+++ b/gdb/microblaze-tdep.c
@@ -66,6 +66,14 @@
 
 extern enum microblaze_instr get_insn_microblaze (long, bfd_boolean *, 
 		enum microblaze_instr_type *, short *);
+extern unsigned long microblaze_get_target_address (long inst,
+                                                    bfd_boolean immfound,
+                                                    int immval,
+                                                    long pcval,
+                                                    long r1val,
+                                                    long r2val,
+                                                    bfd_boolean *targetvalid,
+                                                    bfd_boolean *unconditionalbranch);
 
 
 /* The registers of the Xilinx microblaze processor */
@@ -82,6 +90,9 @@ static const char *microblaze_register_names[] =
   "redr", "rpid", "rzpr", "rtlbx", "rtlbsx"
 };
 
+static const gdb_byte big_break_insn[] = BIG_BREAKPOINT;
+static const gdb_byte little_break_insn[] = LITTLE_BREAKPOINT;
+
 #define MICROBLAZE_NUM_REGS ARRAY_SIZE (microblaze_register_names)
 
 #define mb_error(msg) internal_error (__FILE__, __LINE__, _(msg))
@@ -145,8 +156,13 @@ microblaze_fetch_instruction (CORE_ADDR pc)
     return 0;
 
   insn = 0;
-  for (i = 0; i < sizeof (buf); i++)
-    insn = (insn << 8) | buf[i];
+  if (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {
+      for (i = 0; i < sizeof (buf); i++)
+          insn = (insn << 8) | buf[i];
+  } else {
+      for (i = 3; i >= 0; i--)
+          insn = (insn << 8) | buf[i];
+  }
   return insn;
 }
 
@@ -192,11 +208,16 @@ microblaze_push_dummy_call (struct gdbarch *gdbarch, struct value *function,
 static const gdb_byte *
 microblaze_breakpoint_from_pc (CORE_ADDR *pc, int *len)
 {
-  static const gdb_byte break_insn[] = BIG_BREAKPOINT;
-
-  //mb_warn ("breakpoint_from_pc doesn't check for delay slot");
-  *len = sizeof (break_insn);
-  return break_insn;
+  if (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) 
+    {
+      *len = sizeof (big_break_insn);
+      return big_break_insn;
+    } 
+  else
+    {
+      *len = sizeof (little_break_insn);
+      return little_break_insn;
+    }
 }
 
 /* Allocate and initialize a frame cache.  */
-- 
1.7.0.4

